"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require('fs');
const path = require('path');
const _1 = require("./");
function stat(thePath) {
    return Promise.resolve(thePath)
        .then(realPath)
        .then(thePath => new Promise((resolve, reject) => {
        fs.stat(thePath, (err, stats) => {
            if (err) {
                reject(err);
            }
            else {
                stats.path = thePath;
                resolve(stats);
            }
        });
    }));
}
function lstat(thePath) {
    return Promise.resolve(thePath)
        .then(path.normalize)
        .then(thePath => new Promise((resolve, reject) => {
        _1.log.debug('lstat for ' + thePath);
        fs.lstat(thePath, (err, stats) => {
            if (err) {
                reject(err);
            }
            else {
                stats.path = thePath;
                resolve(stats);
            }
        });
    }));
}
function realPath(thePath) {
    return new Promise((resolve, reject) => {
        fs.realpath(thePath, (err, resolvedPath) => err ? reject(err) : resolve(resolvedPath));
    });
}
function pathExists(thePath) {
    return stat(thePath).then((stats) => stats.path).catch(() => false);
}
;
function isFile(thePath) {
    return stat(thePath).then((stats) => stats.isFile() ? stats.path : false).catch(() => false);
}
;
function isDirectory(thePath) {
    return stat(thePath).then((stats) => stats.isDirectory() ? stats.path : false).catch(() => false);
}
;
function isLink(thePath) {
    return lstat(thePath).then((stats) => stats.isSymbolicLink() ? stats.path : false).catch(() => false);
}
;
function readDir(thePath) {
    return Promise.resolve(thePath)
        .then(realPath)
        .then(thePath => new Promise((resolve, reject) => {
        fs.readdir(thePath, (err, files) => {
            if (err) {
                reject(err);
            }
            else {
                files.path = thePath;
                resolve(files);
            }
        });
    }));
}
function readFile(thePath, isText = true) {
    return new Promise((resolve, reject) => {
        let encoding = isText ? 'utf8' : undefined;
        fs.readFile(thePath, encoding, (err, data) => {
            if (err) {
                reject(err);
            }
            resolve(data);
        });
    });
}
;
function readTextFile(thePath) {
    return readFile(thePath, true);
}
;
function readJsonFile(thePath) {
    return Promise.resolve(thePath)
        .then(readTextFile)
        .then(JSON.parse);
}
function writeFile(thePath, content, isText = true) {
    return new Promise((resolve, reject) => {
        var encoding = isText ? 'utf8' : undefined;
        fs.writeFile(thePath, content, encoding, (err) => err ? reject(err) : resolve());
    });
}
;
function writeStream(thePath, content) {
    return new Promise((resolve, reject) => {
        let s = fs.createWriteStream(thePath, { flags: 'w', mode: 0o666 });
        s.on('error', (src) => reject(src));
        s.write(content, 'binary', () => resolve());
        s.end();
    });
}
function writeTextFile(thePath, content) {
    return writeFile(thePath, content, true);
}
;
function writeJsonFile(thePath, obj) {
    return Promise.resolve(obj)
        .then(JSON.stringify)
        .then(data => writeTextFile(thePath, data));
}
function appendFile(thePath, content, isText = true) {
    return new Promise((resolve, reject) => {
        var encoding = isText ? 'utf8' : undefined;
        fs.appendFile(thePath, content, encoding, (err) => err ? reject(err) : resolve());
    });
}
;
function remove(thePath) {
    return new Promise((resolve, reject) => {
        fs.unlink(thePath, (e) => (e ? reject(e) : resolve()));
    });
}
exports.fsUtil = {
    realPath: realPath,
    pathExists: pathExists,
    isFile: isFile,
    isDirectory: isDirectory,
    isLink: isLink,
    readDir: readDir,
    readFile: readFile,
    readTextFile: readTextFile,
    readJsonFile: readJsonFile,
    writeFile: writeFile,
    writeStream: writeStream,
    writeTextFile: writeTextFile,
    writeJsonFile: writeJsonFile,
    appendFile: appendFile,
    remove: remove
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnNVdGlsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2ZzVXRpbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLE1BQU0sRUFBRSxHQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUMxQixNQUFNLElBQUksR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7QUFFN0IseUJBQXlCO0FBd0J6QixjQUFjLE9BQWM7SUFDM0IsTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDO1NBQzdCLElBQUksQ0FBQyxRQUFRLENBQUM7U0FDZCxJQUFJLENBQUMsT0FBTyxJQUFJLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLE1BQU07UUFDNUMsRUFBRSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxHQUFPLEVBQUUsS0FBUztZQUNuQyxFQUFFLENBQUEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO2dCQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUFDLENBQUM7WUFDeEIsSUFBSSxDQUFJLENBQUM7Z0JBQ1IsS0FBSyxDQUFDLElBQUksR0FBRyxPQUFPLENBQUM7Z0JBQ3JCLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNoQixDQUFDO1FBQ0YsQ0FBQyxDQUFDLENBQUM7SUFDSixDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ04sQ0FBQztBQUVELGVBQWUsT0FBYztJQUM1QixNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUM7U0FDN0IsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUM7U0FDcEIsSUFBSSxDQUFDLE9BQU8sSUFBSSxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxNQUFNO1FBQzVDLE1BQUcsQ0FBQyxLQUFLLENBQUMsWUFBWSxHQUFHLE9BQU8sQ0FBQyxDQUFDO1FBQ2xDLEVBQUUsQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLENB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