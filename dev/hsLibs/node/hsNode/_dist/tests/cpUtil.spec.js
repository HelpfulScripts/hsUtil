"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const _1 = require("./");
describe("cpUtil", () => {
    let cpOut, cpErr, cpE;
    const helper = {
        out: (out, err) => { cpOut = out; cpErr = err; },
        err: (e) => { cpE = e; }
    };
    function call(cmd, done) {
        _1.exec(cmd)
            .then((result) => { helper.out(result.out, result.err); done(); })
            .catch((e) => { helper.err(e); done(); });
    }
    beforeEach(() => {
        cpE = cpErr = cpOut = undefined;
        spyOn(helper, 'out').and.callThrough();
        spyOn(helper, 'err').and.callThrough();
    });
    describe('valid command', () => {
        beforeEach(done => {
            call("pwd", done);
        });
        it('should execute "pwd" in a shell without error', done => {
            expect(helper.out).toHaveBeenCalled();
            expect(helper.err).not.toHaveBeenCalled();
            done();
        });
        it('should result in path', () => {
            expect(cpOut.trim().endsWith('/hsNode')).toEqual(true);
            expect(cpE).not.toBeDefined();
            expect(cpErr).toBe('');
        });
    });
    describe('invalid command', () => {
        beforeEach(done => {
            call("abcd", done);
        });
        it('should fail executing "abcd" in a shell', done => {
            expect(helper.out).not.toHaveBeenCalled();
            expect(helper.err).toHaveBeenCalled();
            done();
        });
        it('should result in error', () => {
            expect(cpOut).not.toBeDefined();
            expect(cpErr).not.toBeDefined();
            expect(cpE).toMatch('abcd: command not found');
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3BVdGlsLnNwZWMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY3BVdGlsLnNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSx5QkFBMEI7QUFHMUIsUUFBUSxDQUFDLFFBQVEsRUFBRTtJQUNmLElBQUksS0FBWSxFQUFFLEtBQVksRUFBRSxHQUFVLENBQUM7SUFDM0MsTUFBTSxNQUFNLEdBQUc7UUFDWCxHQUFHLEVBQUUsQ0FBQyxHQUFVLEVBQUUsR0FBVSxPQUFPLEtBQUssR0FBRyxHQUFHLENBQUMsQ0FBQyxLQUFLLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUM5RCxHQUFHLEVBQUUsQ0FBQyxDQUFRLE9BQU8sR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDbEMsQ0FBQztJQUVGLGNBQWMsR0FBVSxFQUFFLElBQVE7UUFDOUIsT0FBSSxDQUFDLEdBQUcsQ0FBQzthQUNKLElBQUksQ0FBQyxDQUFDLE1BQStCLE9BQU8sTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQzFGLEtBQUssQ0FBQyxDQUFDLENBQVEsT0FBTyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN6RCxDQUFDO0lBRUQsVUFBVSxDQUFDO1FBQ1AsR0FBRyxHQUFHLEtBQUssR0FBRyxLQUFLLEdBQUcsU0FBUyxDQUFDO1FBQ2hDLEtBQUssQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ3ZDLEtBQUssQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQzNDLENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLGVBQWUsRUFBRTtRQUN0QixVQUFVLENBQUMsSUFBSTtZQUFNLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFJdkMsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsK0NBQStDLEVBQUUsSUFBSTtZQUNwRCxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLGdCQUFnQixFQUFFLENBQUM7WUFDdEMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztZQUMxQyxJQUFJLEVBQUUsQ0FBQztRQUNYLENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLHVCQUF1QixFQUFFO1lBQ3hCLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3ZELE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLENBQUM7WUFDOUIsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUMzQixDQUFDLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLGlCQUFpQixFQUFFO1FBQ3hCLFVBQVUsQ0FBQyxJQUFJO1lBQU0sSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztRQUl4QyxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyx5Q0FBeUMsRUFBRSxJQUFJO1lBQzlDLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLGdCQUFnQixFQUFFLENBQUM7WUFDMUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1lBQ3RDLElBQUksRUFBRSxDQUFDO1FBQ1gsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsd0JBQXdCLEVBQUU7WUFDekIsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUNoQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQ2hDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMseUJBQXlCLENBQUMsQ0FBQztRQUNuRCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyxDQUFDLENBQUMifQ==