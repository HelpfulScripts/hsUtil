"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const _1 = require("./");
const DEBUG = Symbol('DEBUG');
const INFO = Symbol('INFO');
const WARN = Symbol('WARN');
const ERROR = Symbol('ERROR');
;
const gLevels = {
    [DEBUG]: { importance: 0, sym: DEBUG, desc: 'DEBUG' },
    [INFO]: { importance: 1, sym: INFO, desc: 'INFO' },
    [WARN]: { importance: 2, sym: WARN, desc: 'WARN' },
    [ERROR]: { importance: 3, sym: ERROR, desc: 'ERROR' }
};
var gLevel = (gLevel === undefined) ? gLevels[INFO] : gLevel;
console.log('set log level to ' + gLevel.sym.toString());
let gDateFormat = '%YYYY%MM%DD %hh:%mm:%ss.%jjj';
let gLogFile;
function log() {
    let gPrefix = '';
    let gColors = true;
    function level(newLevel) {
        if (newLevel) {
            if (gLevels[newLevel]) {
                let oldLevel = gLevel;
                gLevel = gLevels[newLevel];
                let msg = 'new log level \'' + gLevel.desc.toUpperCase() + '\' (was ' + oldLevel.desc.toUpperCase() + ')';
                out((gLevel.sym === oldLevel.sym) ? DEBUG : INFO, msg);
            }
            else {
                out(ERROR, "unkown level " + newLevel.toString() + '; log level remains ' + gLevel.sym.toString());
            }
        }
        return gLevel.sym;
    }
    function debug(msg) { out(DEBUG, msg); }
    function info(msg) { out(INFO, msg); }
    function warn(msg) { out(WARN, msg); }
    function error(msg) { out(ERROR, msg); }
    function dateFormat(fmtStr) {
        if (fmtStr) {
            gDateFormat = fmtStr;
        }
        return gDateFormat;
    }
    function prefix(prf = '') {
        gPrefix = prf ? prf + ' ' : '';
    }
    function logFile(file = 'log-%YYYY-%MM-%DD.txt') {
        return Promise.resolve(file)
            .then(file => {
            if (file !== gLogFile) {
                gLogFile = (file === '') ? undefined : file;
            }
            if (!gLogFile) {
                info("disabling logfile");
                return gLogFile;
            }
            if (gLogFile.indexOf('/') >= 0) {
                const dir = gLogFile.substring(0, gLogFile.lastIndexOf('/'));
                return _1.fsUtil.pathExists(dir).then(exists => {
                    if (!exists) {
                        gLogFile = undefined;
                        warn(`path ${dir} doesn't exists; logfile disabled`);
                    }
                    else {
                        info(gLogFile ? "now logging to file " + _1.hsDate(gLogFile) : "disabling logfile");
                    }
                    return gLogFile;
                });
            }
            info("now logging to file " + _1.hsDate(gLogFile));
            return gLogFile;
        });
    }
    function out(sym, msg) {
        const color = { ERROR: '\x1b[31m\x1b[1m', WARN: '\x1b[33m', DEBUG: '\x1b[36m', INFO: '\x1b[32m' };
        let desc = gLevels[sym];
        if (desc.importance >= gLevel.importance) {
            const dateStr = _1.hsDate(gDateFormat);
            let line = (typeof msg === 'string') ? msg : _1.hsNode.inspect(msg, null, gColors);
            line = gColors ? ((color[sym] || "") + dateStr + ' ' + gPrefix + desc.desc + '\x1b[0m ' + line) :
                (dateStr + ' ' + gPrefix + desc.desc + ' ' + line);
            console.log(line);
            if (msg.stack) {
                console.log(msg.stack);
            }
            if (gLogFile) {
                const filename = _1.hsDate(gLogFile);
                _1.fsUtil.appendFile(filename, line + '\n').catch(e => {
                    console.log(`error appending to file ${gLogFile}: ${e}`);
                    throw new Error(e);
                });
            }
        }
    }
    function config(cfg) {
        console.log(cfg);
        let colors = true;
        if (cfg.colors !== undefined) {
            gColors = colors = cfg.colors;
        }
        if (cfg.logFile !== undefined) {
            logFile(cfg.logFile || undefined);
        }
        if (cfg.dateFormat !== undefined) {
            dateFormat(cfg.dateFormat);
        }
        if (cfg.level !== undefined) {
            level(cfg.level);
        }
    }
    return {
        DEBUG: DEBUG,
        INFO: INFO,
        WARN: WARN,
        ERROR: ERROR,
        level: level,
        debug: debug,
        info: info,
        warn: warn,
        error: error,
        dateFormat: dateFormat,
        prefix: prefix,
        logFile: logFile,
        config: config
    };
}
exports.default = log();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xvZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQXVEQSx5QkFBNEM7QUFRNUMsTUFBTSxLQUFLLEdBQVcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBT3RDLE1BQU0sSUFBSSxHQUFZLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztBQU9yQyxNQUFNLElBQUksR0FBWSxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7QUFPckMsTUFBTSxLQUFLLEdBQVcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBSzZCLENBQUM7QUFHcEUsTUFBTSxPQUFPLEdBQUc7SUFDWixDQUFDLEtBQUssQ0FBQyxFQUFLLEVBQUMsVUFBVSxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUM7SUFDdEQsQ0FBQyxJQUFJLENBQUMsRUFBTSxFQUFDLFVBQVUsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRyxJQUFJLEVBQUUsTUFBTSxFQUFDO0lBQ3JELENBQUMsSUFBSSxDQUFDLEVBQU0sRUFBQyxVQUFVLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUcsSUFBSSxFQUFFLE1BQU0sRUFBQztJQUNyRCxDQUFDLEtBQUssQ0FBQyxFQUFLLEVBQUMsVUFBVSxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUM7Q0FDekQsQ0FBQztBQUdGLElBQUksTUFBTSxHQUFhLENBQUMsTUFBTSxLQUFHLFNBQVMsQ0FBQyxHQUFFLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxNQUFNLENBQUM7QUFDcEUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7QUFHekQsSUFBSSxXQUFXLEdBQUssOEJBQThCLENBQUM7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