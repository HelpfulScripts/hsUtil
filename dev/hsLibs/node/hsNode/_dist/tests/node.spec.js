"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const _1 = require("./");
describe("node", () => {
    describe("inspect", () => {
        it('should decompose {a:"yes", b:[1,2,3]}', () => {
            expect(_1.hsNode.inspect({ a: "yes", b: [1, 2, 3] }, null, false)).toEqual("{ a: 'yes', b: [ 1, 2, 3 ] }");
        });
        it('should report in color', () => {
            expect(_1.hsNode.inspect({ a: "yes", b: [1, 2, 3] })).not.toEqual(jasmine.stringMatching("{ a: 'yes', b: [ 1, 2, 3 ] }"));
            expect(_1.hsNode.inspect({ a: "yes", b: [1, 2, 3] })).toEqual(jasmine.stringMatching("'yes'"));
            expect(_1.hsNode.inspect({ a: "yes", b: [1, 2, 3] })).toEqual(jasmine.stringMatching("[ 1, 2, 3 ]"));
        });
        it('should report first level only', () => {
            expect(_1.hsNode.inspect({ a: "yes", b: [1, 2, 3] }, null, false)).toEqual("{ a: 'yes', b: [ 1, 2, 3 ] }");
            expect(_1.hsNode.inspect({ a: "yes", b: [1, 2, 3] }, 0, false)).toEqual("{ a: 'yes', b: [Object] }");
            expect(_1.hsNode.inspect({ a: "yes", b: [1, 2, 3] }, 1, false)).toEqual("{ a: 'yes', b: [ 1, 2, 3 ] }");
        });
    });
    describe("timeout", () => {
        let reject;
        let resolve;
        beforeEach(done => {
            resolve = jasmine.createSpy("resolve");
            reject = jasmine.createSpy("reject");
            _1.hsNode.timeout(100)
                .then(resolve)
                .catch(reject);
            setTimeout(done, 101);
        });
        it('should fail after 100ms', done => {
            expect(resolve).not.toHaveBeenCalled();
            expect(reject).toHaveBeenCalled();
            done();
        });
    });
    describe("delay", () => {
        let reject;
        let resolve;
        beforeEach(done => {
            resolve = jasmine.createSpy("resolve");
            reject = jasmine.createSpy("reject");
            _1.hsNode.delay(100)
                .then(resolve)
                .catch(reject);
            setTimeout(done, 101);
        });
        it('should resolve after 100ms', done => {
            expect(resolve).toHaveBeenCalled();
            expect(reject).not.toHaveBeenCalled();
            done();
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZS5zcGVjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL25vZGUuc3BlYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHlCQUE0QjtBQUU1QixRQUFRLENBQUMsTUFBTSxFQUFFO0lBQ2IsUUFBUSxDQUFDLFNBQVMsRUFBRTtRQUNoQixFQUFFLENBQUMsdUNBQXVDLEVBQUU7WUFDeEMsTUFBTSxDQUFDLFNBQU0sQ0FBQyxPQUFPLENBQUMsRUFBQyxDQUFDLEVBQUMsS0FBSyxFQUFFLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsOEJBQThCLENBQUMsQ0FBQztRQUN0RyxDQUFDLENBQUMsQ0FBQztRQUNILEVBQUUsQ0FBQyx3QkFBd0IsRUFBRTtZQUN6QixNQUFNLENBQUMsU0FBTSxDQUFDLE9BQU8sQ0FBQyxFQUFDLENBQUMsRUFBQyxLQUFLLEVBQUUsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsOEJBQThCLENBQUMsQ0FBQyxDQUFDO1lBQ2pILE1BQU0sQ0FBQyxTQUFNLENBQUMsT0FBTyxDQUFDLEVBQUMsQ0FBQyxFQUFDLEtBQUssRUFBRSxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7WUFDdEYsTUFBTSxDQUFDLFNBQU0sQ0FBQyxPQUFPLENBQUMsRUFBQyxDQUFDLEVBQUMsS0FBSyxFQUFFLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMs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