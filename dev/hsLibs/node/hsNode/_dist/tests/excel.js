"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const XLSX = require('xlsx');
const _1 = require("./");
console.log(_1.log);
_1.log.prefix('XL');
function* nextExcelColIndex(startCol = 'A') {
    function nextChar(c) { return String.fromCharCode(c.charCodeAt(0) + 1); }
    let c = startCol;
    while (true) {
        yield c;
        if (c.length === 1) {
            c = (c < 'Z') ? nextChar(c[0]) : 'AA';
        }
        else {
            var ch = nextChar(c[1]);
            c = (ch > 'Z') ? nextChar(c[0]) + 'A' : c[0] + ch;
        }
    }
}
exports.nextExcelColIndex = nextExcelColIndex;
function readFile(name) {
    let workbook;
    function getSheetNames() {
        let names = [];
        for (let s in workbook.Sheets) {
            names.push(s);
        }
        return names;
    }
    function getCellValue(sheet, col, row) {
        if (typeof sheet === 'string') {
            sheet = workbook.Sheets[sheet];
        }
        let c = '';
        if (sheet[col + row] && sheet[col + row].v !== '') {
            c = sheet[col + row];
            switch (c.t) {
                case 's':
                    c = c.w.replace(/,/g, ';').replace(/[\n\r]+/g, ' ').trim();
                    break;
                case 'n':
                default: c = c.w.replace(/,/g, '');
            }
        }
        return c;
    }
    function* getCellValues(sheet, row, colIterator) {
        for (let col of colIterator) {
            yield getCellValue(sheet, col, row);
        }
    }
    function* getConsecutiveColumnNames(sheet, row, startCol = 'A') {
        for (let col of nextExcelColIndex(startCol)) {
            if (!getCellValue(sheet, col, row)) {
                break;
            }
            yield { col: col, name: getCellValue(sheet, col, row) };
        }
    }
    function getRow(sheet, row, columns) {
        let result = [...getCellValues(sheet, row, columns)];
        return result;
    }
    function constructCol(sheetName, row, it) {
        let result = {
            names: [],
            sheetName: sheetName,
            headerRow: row,
            colIndex: []
        };
        for (let col of it) {
            result.names.push(col.name);
            result.colIndex.push(col.col);
        }
        return result;
    }
    function getTableColumns(sheetName, startCol = 'A', row = 1) {
        let sheet = workbook.Sheets[sheetName];
        return constructCol(sheetName, row, getConsecutiveColumnNames(sheet, row, startCol));
    }
    function getRowsForColumns(columns, maxRows = 0) {
        if (!columns.sheetName) {
            throw new Error('illegal columns parameter in getRowsForColumns');
        }
        let sheet = workbook.Sheets[columns.sheetName];
        let result = [];
        let row = 0;
        while (true) {
            let newRow = getRow(sheet, row + columns.headerRow + 1, columns.colIndex);
            let count = 0;
            for (let c in newRow) {
                if (newRow[c]) {
                    count++;
                }
            }
            row++;
            if (count > 0) {
                result.push(newRow);
            }
            else if (maxRows <= 0) {
                break;
            }
            if (maxRows > 0 && row >= maxRows) {
                break;
            }
        }
        return result;
    }
    function getTable(sheetName, startCol = 'A', startRow = 1) {
        var columns = getTableColumns(sheetName, startCol, startRow);
        var table = getRowsForColumns(columns);
        return { columns, table };
    }
    _1.log.debug('reading file ' + name);
    workbook = XLSX.readFile(name);
    return {
        getSheetNames: getSheetNames,
        getTableColumns: getTableColumns,
        getRowsForColumns: getRowsForColumns,
        getTable: getTable,
        nextExcelColIndex: nextExcelColIndex,
        getCellValue: getCellValue
    };
}
exports.readFile = readFile;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhjZWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZXhjZWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxNQUFNLElBQUksR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7QUFFN0IseUJBQXlCO0FBQ3pCLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBRyxDQUFDLENBQUM7QUFDakIsTUFBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztBQWdEakIsNEJBQW1DLFFBQVEsR0FBQyxHQUFHO0lBQzlDLGtCQUFrQixDQUFRLElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFaEYsSUFBSSxDQUFDLEdBQUcsUUFBUSxDQUFDO0lBQ2pCLE9BQU8sSUFBSSxFQUFFLENBQUM7UUFDYixNQUFNLENBQUMsQ0FBQztRQUNSLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNwQixDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQztRQUN0QyxDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDUCxJQUFJLEVBQUUsR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDeEIsQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxHQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUNoRCxDQUFDO0lBQ0YsQ0FBQztBQUNGLENBQUM7QUFiRCw4Q0FhQztBQXVCRCxrQkFBeUIsSUFB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