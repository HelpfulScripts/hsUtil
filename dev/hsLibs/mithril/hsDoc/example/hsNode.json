{
	"id": 0,
	"name": "hsNode",
	"kind": 0,
	"flags": {},
	"children": [
		{
			"id": 148,
			"name": "\"cpUtil\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/sth1pal/Documents/Development/JavaScript/node.js/ts6/dev/hsLibs/node/hsNode/src/cpUtil.ts",
			"children": [
				{
					"id": 149,
					"name": "cp",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"sources": [
						{
							"fileName": "cpUtil.ts",
							"line": 1,
							"character": 8
						}
					],
					"type": {
						"type": "instrinct",
						"name": "any"
					},
					"defaultValue": " require('child_process')"
				},
				{
					"id": 150,
					"name": "exec",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 151,
							"name": "exec",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"returns": "promise to provide the stdout and stderr streams form the child process.\n",
								"tags": [
									{
										"tag": "ngdoc",
										"text": "object"
									},
									{
										"tag": "name",
										"text": "exec"
									},
									{
										"tag": "methodof",
										"text": "hsNode.cpUtil"
									},
									{
										"tag": "description",
										"text": "executes `command` in a child process and promises to return the stdout and stderr streams.\n<pre>\nlet utils = require('./cpUtils');\nutils.exec(cmd)\n.then((stdout, stderr) => {...})\n.catch(err => {...});\n</pre>"
									}
								]
							},
							"parameters": [
								{
									"id": 152,
									"name": "command",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the shell command to execute"
									},
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								},
								{
									"id": 153,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"text": "the options to pass along to the shell"
									},
									"type": {
										"type": "instrinct",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 154,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 156,
													"name": "err",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "cpUtil.ts",
															"line": 30,
															"character": 56
														}
													],
													"type": {
														"type": "instrinct",
														"name": "string"
													}
												},
												{
													"id": 155,
													"name": "out",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "cpUtil.ts",
															"line": 30,
															"character": 44
														}
													],
													"type": {
														"type": "instrinct",
														"name": "string"
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														156,
														155
													]
												}
											]
										}
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "cpUtil.ts",
							"line": 29,
							"character": 13
						}
					]
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						149
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						150
					]
				}
			],
			"sources": [
				{
					"fileName": "cpUtil.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 34,
			"name": "\"date\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/sth1pal/Documents/Development/JavaScript/node.js/ts6/dev/hsLibs/node/hsNode/src/date.ts",
			"comment": {
				"tags": [
					{
						"tag": "ngdoc",
						"text": "object"
					},
					{
						"tag": "name",
						"text": "hsNode.date"
					},
					{
						"tag": "description",
						"text": ".\n### Date formatting support.\nFormats are specified in a printf-style format string.\n### Example:\n<pre>\nimport date  from './date';\nhsDate('%MM/%DD/%YY');           // -> 08/17/16 (using current date)\nlet d = new Date('7/4/2010');\nhsDate('%DDDD, %MM/%DD/%YY', d); // -> Sunday, 07/04/10\n</pre>\n### Supported Formats\n- `%YY, %YYYY`           : two- or four-digit year, as '73', '1973'\n- `%M, %MM, %MMM, %MMMM` : month of year as '2', '02', 'Feb', 'February'\n- `%D, %DD`              : day of month as '5', '05' (1...31)\n- `%DDD, %DDDD`          : day of week as 'Tue', 'Tuesday'\n- `%h, %hh`              : hour of day as '7', '07 (0...23)\n- `%m, %mm`              : minutes as '6', '06' (0..59)\n- `%ss`                  : seconds as '09' (0...59)\n- `%j, %jj, %jjj`        : milliseconds as '1', '15', '159'\n"
					}
				]
			},
			"children": [
				{
					"id": 36,
					"name": "dayStr",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"comment": {
						"shortText": "translates short day names to full day names"
					},
					"sources": [
						{
							"fileName": "date.ts",
							"line": 31,
							"character": 12
						}
					],
					"type": {
						"type": "reference",
						"name": "Array",
						"typeArguments": [
							{
								"type": "reference",
								"name": "Array",
								"typeArguments": [
									{
										"type": "instrinct",
										"name": "string"
									}
								]
							}
						]
					},
					"defaultValue": " [\n    ['Sun', 'Sunday'],['Mon', 'Monday'],['Tue', 'Tuesday'],['Wed', 'Wednesday'],['Thu', 'Thursday'],['Fri', 'Friday'],['Sat', 'Saturday']]"
				},
				{
					"id": 35,
					"name": "monthStr",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"comment": {
						"shortText": "translates short month names to full month names"
					},
					"sources": [
						{
							"fileName": "date.ts",
							"line": 26,
							"character": 14
						}
					],
					"type": {
						"type": "reference",
						"name": "Array",
						"typeArguments": [
							{
								"type": "reference",
								"name": "Array",
								"typeArguments": [
									{
										"type": "instrinct",
										"name": "string"
									}
								]
							}
						]
					},
					"defaultValue": " [\n    ['Jan', 'January'], ['Feb', 'February'], ['Mar', 'March'], ['Apr', 'April'], ['May', 'May'], ['Jun', 'June'],\n    ['Jul', 'July'], ['Aug', 'August'], ['Sep', 'September'], ['Oct', 'October'], ['Nov', 'November'], ['Dec', 'December']]"
				},
				{
					"id": 37,
					"name": "formatNumber",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 38,
							"name": "formatNumber",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "left-pads a `number` with zeros to match `minDigits` minimum digits"
							},
							"parameters": [
								{
									"id": 39,
									"name": "number",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								},
								{
									"id": 40,
									"name": "minDigits",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "date.ts",
							"line": 37,
							"character": 21
						}
					]
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						36,
						35
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						37
					]
				}
			],
			"sources": [
				{
					"fileName": "date.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 54,
			"name": "\"excel\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/sth1pal/Documents/Development/JavaScript/node.js/ts6/dev/hsLibs/node/hsNode/src/excel.ts",
			"children": [
				{
					"id": 55,
					"name": "XLSX",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"sources": [
						{
							"fileName": "excel.ts",
							"line": 1,
							"character": 10
						}
					],
					"type": {
						"type": "instrinct",
						"name": "any"
					},
					"defaultValue": " require('xlsx')"
				},
				{
					"id": 56,
					"name": "nextExcelColIndex",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 57,
							"name": "nextExcelColIndex",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"tags": [
									{
										"tag": "ngdoc",
										"text": "object"
									},
									{
										"tag": "name",
										"text": "nextExcelColIndex"
									},
									{
										"tag": "methodof",
										"text": "hsNode.excel"
									},
									{
										"tag": "description",
										"text": "**generator** for Excel column indices starting at startCol.\nFollowing 'Z' the next column generated is 'AA' and so on. The generator\nstarts with producing startCol as first index.\n# Usage\n<pre>\nfor (col of file.nextExcelColIndex(startCol='Y') {\n   printf(\"%s, \", col);      // -> Y, Z, AA, AB\n   if (col === 'AB')  { break; }\n}\n</pre>"
									}
								]
							},
							"parameters": [
								{
									"id": 58,
									"name": "startCol",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the first column index ('A', ....) to yield; defaults to 'A'\n"
									},
									"type": {
										"type": "instrinct",
										"name": "string"
									},
									"defaultValue": "\"A\""
								}
							],
							"type": {
								"type": "reference",
								"name": "IterableIterator",
								"typeArguments": [
									{
										"type": "instrinct",
										"name": "string"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "excel.ts",
							"line": 53,
							"character": 34
						}
					]
				},
				{
					"id": 59,
					"name": "readFile",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 60,
							"name": "readFile",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"returns": "a promise to read the file. Upon resolutions an object of accessor functions is provided:\n{\n\t  \t{@link hsNode.excelFile#getSheetNames getSheetNames},\n\t\t{@link hsNode.excelFile#getTableColumns getTableColumns},\n\t\t{@link hsNode.excelFile#getRowsForColumns getRowsForColumns},\n\t\t{@link hsNode.excelFile#getTable getTable},\n\t\t{@link hsNode.excelFile#nextExcelColIndex nextExcelColIndex},\n\t\t{@link hsNode.excelFile#getCellValue getCellValue}\n}\n",
								"tags": [
									{
										"tag": "ngdoc",
										"text": "object"
									},
									{
										"tag": "name",
										"text": "readFile"
									},
									{
										"tag": "methodof",
										"text": "hsNode.excel"
									},
									{
										"tag": "description",
										"text": "reads and returns an {@link #/hsLog/hsNode.excelFile excel file}.\n# Usage\n<pre>\nconst excel = require('./hsNode.excel');\nconst excelFile = excel.excelFile('./aFile.xlsx');\n</pre>"
									}
								]
							},
							"parameters": [
								{
									"id": 61,
									"name": "name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the name of the Excel file to read"
									},
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 62,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 68,
											"name": "getCellValue",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "excel.ts",
													"line": 279,
													"character": 14
												}
											],
											"type": {
												"type": "reference",
												"name": "getCellValue"
											},
											"defaultValue": "\t\tgetCellValue"
										},
										{
											"id": 65,
											"name": "getRowsForColumns",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "excel.ts",
													"line": 276,
													"character": 19
												}
											],
											"type": {
												"type": "reference",
												"name": "getRowsForColumns"
											},
											"defaultValue": "\tgetRowsForColumns"
										},
										{
											"id": 63,
											"name": "getSheetNames",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "excel.ts",
													"line": 274,
													"character": 15
												}
											],
											"type": {
												"type": "reference",
												"name": "getSheetNames"
											},
											"defaultValue": "\t\tgetSheetNames"
										},
										{
											"id": 66,
											"name": "getTable",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "excel.ts",
													"line": 277,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"name": "getTable"
											},
											"defaultValue": "\t\t\tgetTable"
										},
										{
											"id": 64,
											"name": "getTableColumns",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "excel.ts",
													"line": 275,
													"character": 17
												}
											],
											"type": {
												"type": "reference",
												"name": "getTableColumns"
											},
											"defaultValue": "\tgetTableColumns"
										},
										{
											"id": 67,
											"name": "nextExcelColIndex",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "excel.ts",
													"line": 278,
													"character": 19
												}
											],
											"type": {
												"type": "reference",
												"name": "nextExcelColIndex",
												"id": 56
											},
											"defaultValue": "\tnextExcelColIndex"
										}
									],
									"groups": [
										{
											"title": "Variables",
											"kind": 32,
											"children": [
												68,
												65,
												63,
												66,
												64,
												67
											]
										}
									]
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "excel.ts",
							"line": 89,
							"character": 24
						}
					]
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						55
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						56,
						59
					]
				}
			],
			"sources": [
				{
					"fileName": "excel.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 69,
			"name": "\"fsUtil\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/sth1pal/Documents/Development/JavaScript/node.js/ts6/dev/hsLibs/node/hsNode/src/fsUtil.ts",
			"children": [
				{
					"id": 70,
					"name": "fs",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"sources": [
						{
							"fileName": "fsUtil.ts",
							"line": 1,
							"character": 8
						}
					],
					"type": {
						"type": "instrinct",
						"name": "any"
					},
					"defaultValue": " require('fs')"
				},
				{
					"id": 71,
					"name": "path",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"sources": [
						{
							"fileName": "fsUtil.ts",
							"line": 2,
							"character": 10
						}
					],
					"type": {
						"type": "instrinct",
						"name": "any"
					},
					"defaultValue": " require('path')"
				},
				{
					"id": 123,
					"name": "appendFile",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 124,
							"name": "appendFile",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"returns": "promise to provide nothing.\n",
								"tags": [
									{
										"tag": "ngdoc",
										"text": "object"
									},
									{
										"tag": "name",
										"text": "appendFile"
									},
									{
										"tag": "methodof",
										"text": "hsNode.fsUtil"
									},
									{
										"tag": "description",
										"text": "appends to a file either as binary or text and promises no return."
									}
								]
							},
							"parameters": [
								{
									"id": 125,
									"name": "thePath",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the path to write to"
									},
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								},
								{
									"id": 126,
									"name": "content",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the content to write"
									},
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								},
								{
									"id": 127,
									"name": "isText",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "`true`|`false` if file should be read as `utf8`|binary"
									},
									"type": {
										"type": "instrinct",
										"name": "boolean"
									},
									"defaultValue": "true"
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "instrinct",
										"name": "Object"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "fsUtil.ts",
							"line": 264,
							"character": 19
						}
					]
				},
				{
					"id": 87,
					"name": "isDirectory",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 88,
							"name": "isDirectory",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"returns": "promise to provide `true` or `false`\n",
								"tags": [
									{
										"tag": "ngdoc",
										"text": "object"
									},
									{
										"tag": "name",
										"text": "isDirectory"
									},
									{
										"tag": "methodof",
										"text": "hsNode.fsUtil"
									},
									{
										"tag": "description",
										"text": "determines if `thePath` is a directory and promises to provide `true` or `false`."
									}
								]
							},
							"parameters": [
								{
									"id": 89,
									"name": "thePath",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the path to check"
									},
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "instrinct",
										"name": "any"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "fsUtil.ts",
							"line": 108,
							"character": 20
						}
					]
				},
				{
					"id": 84,
					"name": "isFile",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 85,
							"name": "isFile",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"returns": "promise to provide `true` or `false`\n",
								"tags": [
									{
										"tag": "ngdoc",
										"text": "object"
									},
									{
										"tag": "name",
										"text": "isFile"
									},
									{
										"tag": "methodof",
										"text": "hsNode.fsUtil"
									},
									{
										"tag": "description",
										"text": "determines if `thePath` is a file and promises to provide `true` or `false`."
									}
								]
							},
							"parameters": [
								{
									"id": 86,
									"name": "thePath",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the path to check"
									},
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "instrinct",
										"name": "any"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "fsUtil.ts",
							"line": 96,
							"character": 15
						}
					]
				},
				{
					"id": 90,
					"name": "isLink",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 91,
							"name": "isLink",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"returns": "promise to provide `true` or `false`\n",
								"tags": [
									{
										"tag": "ngdoc",
										"text": "object"
									},
									{
										"tag": "name",
										"text": "isLink"
									},
									{
										"tag": "methodof",
										"text": "hsNode.fsUtil"
									},
									{
										"tag": "description",
										"text": "determines if `thePath` is a directory and promises to provide `true` or `false`."
									}
								]
							},
							"parameters": [
								{
									"id": 92,
									"name": "thePath",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the path to check"
									},
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "instrinct",
										"name": "any"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "fsUtil.ts",
							"line": 120,
							"character": 15
						}
					]
				},
				{
					"id": 75,
					"name": "lstat",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 76,
							"name": "lstat",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 77,
									"name": "thePath",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "instrinct",
										"name": "string"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "fsUtil.ts",
							"line": 42,
							"character": 14
						}
					]
				},
				{
					"id": 81,
					"name": "pathExists",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 82,
							"name": "pathExists",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"returns": "promise to provide `true` or `false`\n",
								"tags": [
									{
										"tag": "ngdoc",
										"text": "object"
									},
									{
										"tag": "name",
										"text": "pathExists"
									},
									{
										"tag": "methodof",
										"text": "hsNode.fsUtil"
									},
									{
										"tag": "description",
										"text": "determines if `thePath` exists and promises to provide `true` or `false`."
									}
								]
							},
							"parameters": [
								{
									"id": 83,
									"name": "thePath",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the path to check"
									},
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "instrinct",
										"name": "any"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "fsUtil.ts",
							"line": 84,
							"character": 19
						}
					]
				},
				{
					"id": 93,
					"name": "readDir",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 94,
							"name": "readDir",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"returns": "promise to provide a list of directory entries.\n",
								"tags": [
									{
										"tag": "ngdoc",
										"text": "object"
									},
									{
										"tag": "name",
										"text": "readDir"
									},
									{
										"tag": "methodof",
										"text": "hsNode.fsUtil"
									},
									{
										"tag": "description",
										"text": "lists all files in a directory and promises to provide the list."
									}
								]
							},
							"parameters": [
								{
									"id": 95,
									"name": "thePath",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the path to check"
									},
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "instrinct",
										"name": "string"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "fsUtil.ts",
							"line": 132,
							"character": 16
						}
					]
				},
				{
					"id": 96,
					"name": "readFile",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 97,
							"name": "readFile",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"returns": "promise to provide file content.\n",
								"tags": [
									{
										"tag": "ngdoc",
										"text": "object"
									},
									{
										"tag": "name",
										"text": "readFile"
									},
									{
										"tag": "methodof",
										"text": "hsNode.fsUtil"
									},
									{
										"tag": "description",
										"text": "reads a file either as binary or text and promises to provide the content."
									}
								]
							},
							"parameters": [
								{
									"id": 98,
									"name": "thePath",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the path to read"
									},
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								},
								{
									"id": 99,
									"name": "isText",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "boolean"
									},
									"defaultValue": "true"
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "instrinct",
										"name": "any"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "fsUtil.ts",
							"line": 156,
							"character": 17
						}
					]
				},
				{
					"id": 103,
					"name": "readJsonFile",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 104,
							"name": "readJsonFile",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"returns": "promise to provide file content.\n",
								"tags": [
									{
										"tag": "ngdoc",
										"text": "object"
									},
									{
										"tag": "name",
										"text": "readJsonFile"
									},
									{
										"tag": "methodof",
										"text": "hsNode.fsUtil"
									},
									{
										"tag": "description",
										"text": "reads a text file and promises to provide the content."
									}
								]
							},
							"parameters": [
								{
									"id": 105,
									"name": "thePath",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the path to read"
									},
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "instrinct",
										"name": "any"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "fsUtil.ts",
							"line": 186,
							"character": 21
						}
					]
				},
				{
					"id": 100,
					"name": "readTextFile",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 101,
							"name": "readTextFile",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"returns": "promise to provide file content.\n",
								"tags": [
									{
										"tag": "ngdoc",
										"text": "object"
									},
									{
										"tag": "name",
										"text": "readTextFile"
									},
									{
										"tag": "methodof",
										"text": "hsNode.fsUtil"
									},
									{
										"tag": "description",
										"text": "reads a text file and promises to provide the content."
									}
								]
							},
							"parameters": [
								{
									"id": 102,
									"name": "thePath",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the path to read"
									},
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "instrinct",
										"name": "any"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "fsUtil.ts",
							"line": 174,
							"character": 21
						}
					]
				},
				{
					"id": 78,
					"name": "realPath",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 79,
							"name": "realPath",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"returns": "promise to provide the real canonical system path.\n",
								"tags": [
									{
										"tag": "ngdoc",
										"text": "object"
									},
									{
										"tag": "name",
										"text": "realPath"
									},
									{
										"tag": "methodof",
										"text": "hsNode.fsUtil"
									},
									{
										"tag": "description",
										"text": "determines the canonical path for `thePath`, resolving all symbolic links and '../'in the path."
									}
								]
							},
							"parameters": [
								{
									"id": 80,
									"name": "thePath",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the path to check"
									},
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "instrinct",
										"name": "string"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "fsUtil.ts",
							"line": 68,
							"character": 17
						}
					]
				},
				{
					"id": 128,
					"name": "remove",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 129,
							"name": "remove",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"returns": "promise to provide nothing.\n",
								"tags": [
									{
										"tag": "ngdoc",
										"text": "object"
									},
									{
										"tag": "name",
										"text": "remove"
									},
									{
										"tag": "methodof",
										"text": "hsNode.fsUtil"
									},
									{
										"tag": "description",
										"text": "promises to delete a file or folder."
									}
								]
							},
							"parameters": [
								{
									"id": 130,
									"name": "thePath",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the path to write"
									},
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "instrinct",
										"name": "Object"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "fsUtil.ts",
							"line": 279,
							"character": 15
						}
					]
				},
				{
					"id": 72,
					"name": "stat",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 73,
							"name": "stat",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"tags": [
									{
										"tag": "ngdoc",
										"text": "object"
									},
									{
										"tag": "name",
										"text": "hsNode.fsUtil"
									},
									{
										"tag": "description",
										"text": "Convenience functions for file system access, wrapped in Promises.\n- {@link hsNode.fsUtil#methods_realPath realPath}\n- {@link hsNode.fsUtil#methods_pathExists pathExists}\n- {@link hsNode.fsUtil#methods_isfile isFile}\n- {@link hsNode.fsUtil#methods_isdirectory isDirectory}\n- {@link hsNode.fsUtil#methods_readDir readDir}\n- {@link hsNode.fsUtil#methods_readFile readFile}\n- {@link hsNode.fsUtil#methods_readTextFile readTextFile}\n- {@link hsNode.fsUtil#methods_readJsonFile readJsonFile}\n- {@link hsNode.fsUtil#methods_writeFile writeFile}\n- {@link hsNode.fsUtil#methods_writeTextFile writeTextFile}\n- {@link hsNode.fsUtil#methods_writeJsonFile writeJsonFile}\n- {@link hsNode.fsUtil#methods_appendFile appendFile}\n- {@link hsNode.fsUtil#methods_remove remove}\n"
									}
								]
							},
							"parameters": [
								{
									"id": 74,
									"name": "thePath",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "instrinct",
										"name": "string"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "fsUtil.ts",
							"line": 28,
							"character": 13
						}
					]
				},
				{
					"id": 106,
					"name": "writeFile",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 107,
							"name": "writeFile",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"returns": "promise to provide nothing.\n",
								"tags": [
									{
										"tag": "ngdoc",
										"text": "object"
									},
									{
										"tag": "name",
										"text": "writeFile"
									},
									{
										"tag": "methodof",
										"text": "hsNode.fsUtil"
									},
									{
										"tag": "description",
										"text": "writes a file either as binary or text and promises no return."
									}
								]
							},
							"parameters": [
								{
									"id": 108,
									"name": "thePath",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the path to write to"
									},
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								},
								{
									"id": 109,
									"name": "content",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the content to write"
									},
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								},
								{
									"id": 110,
									"name": "isText",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "`true`|`false` if file should be read as `utf8`|binary"
									},
									"type": {
										"type": "instrinct",
										"name": "boolean"
									},
									"defaultValue": "true"
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "instrinct",
										"name": "Object"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "fsUtil.ts",
							"line": 202,
							"character": 18
						}
					]
				},
				{
					"id": 119,
					"name": "writeJsonFile",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 120,
							"name": "writeJsonFile",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"returns": "promise to provide nothing.\n",
								"tags": [
									{
										"tag": "ngdoc",
										"text": "object"
									},
									{
										"tag": "name",
										"text": "writeJsonFile"
									},
									{
										"tag": "methodof",
										"text": "hsNode.fsUtil"
									},
									{
										"tag": "description",
										"text": "writes a text file and promises no return."
									}
								]
							},
							"parameters": [
								{
									"id": 121,
									"name": "thePath",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the path to write"
									},
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								},
								{
									"id": 122,
									"name": "obj",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the object to write"
									},
									"type": {
										"type": "instrinct",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "instrinct",
										"name": "any"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "fsUtil.ts",
							"line": 248,
							"character": 22
						}
					]
				},
				{
					"id": 111,
					"name": "writeStream",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 112,
							"name": "writeStream",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"returns": "promise to provide nothing.\n",
								"tags": [
									{
										"tag": "ngdoc",
										"text": "object"
									},
									{
										"tag": "name",
										"text": "writeStream"
									},
									{
										"tag": "methodof",
										"text": "hsNode.fsUtil"
									},
									{
										"tag": "description",
										"text": "writes content to a file either as a stream and promises no return."
									}
								]
							},
							"parameters": [
								{
									"id": 113,
									"name": "thePath",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the path to write to"
									},
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								},
								{
									"id": 114,
									"name": "content",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the content to write"
									},
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "instrinct",
										"name": "Object"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "fsUtil.ts",
							"line": 218,
							"character": 20
						}
					]
				},
				{
					"id": 115,
					"name": "writeTextFile",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 116,
							"name": "writeTextFile",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"returns": "promise to provide nothing.\n",
								"tags": [
									{
										"tag": "ngdoc",
										"text": "object"
									},
									{
										"tag": "name",
										"text": "writeTextFile"
									},
									{
										"tag": "methodof",
										"text": "hsNode.fsUtil"
									},
									{
										"tag": "description",
										"text": "writes a text file and promises no return."
									}
								]
							},
							"parameters": [
								{
									"id": 117,
									"name": "thePath",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the path to write"
									},
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								},
								{
									"id": 118,
									"name": "content",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "instrinct",
										"name": "Object"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "fsUtil.ts",
							"line": 235,
							"character": 22
						}
					]
				},
				{
					"id": 131,
					"name": "fsUtil",
					"kind": 2097152,
					"kindString": "Object literal",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 145,
							"name": "appendFile",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "fsUtil.ts",
									"line": 299,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"name": "appendFile",
								"id": 123
							},
							"defaultValue": "     appendFile"
						},
						{
							"id": 135,
							"name": "isDirectory",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "fsUtil.ts",
									"line": 289,
									"character": 15
								}
							],
							"type": {
								"type": "reference",
								"name": "isDirectory",
								"id": 87
							},
							"defaultValue": "    isDirectory"
						},
						{
							"id": 134,
							"name": "isFile",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "fsUtil.ts",
									"line": 288,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"name": "isFile",
								"id": 84
							},
							"defaultValue": "         isFile"
						},
						{
							"id": 136,
							"name": "isLink",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "fsUtil.ts",
									"line": 290,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"name": "isLink",
								"id": 90
							},
							"defaultValue": "         isLink"
						},
						{
							"id": 133,
							"name": "pathExists",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "fsUtil.ts",
									"line": 287,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"name": "pathExists",
								"id": 81
							},
							"defaultValue": "     pathExists"
						},
						{
							"id": 137,
							"name": "readDir",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "fsUtil.ts",
									"line": 291,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "readDir",
								"id": 93
							},
							"defaultValue": "        readDir"
						},
						{
							"id": 138,
							"name": "readFile",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "fsUtil.ts",
									"line": 292,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"name": "readFile",
								"id": 96
							},
							"defaultValue": "       readFile"
						},
						{
							"id": 140,
							"name": "readJsonFile",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "fsUtil.ts",
									"line": 294,
									"character": 16
								}
							],
							"type": {
								"type": "reference",
								"name": "readJsonFile",
								"id": 103
							},
							"defaultValue": "   readJsonFile"
						},
						{
							"id": 139,
							"name": "readTextFile",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "fsUtil.ts",
									"line": 293,
									"character": 16
								}
							],
							"type": {
								"type": "reference",
								"name": "readTextFile",
								"id": 100
							},
							"defaultValue": "   readTextFile"
						},
						{
							"id": 132,
							"name": "realPath",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "fsUtil.ts",
									"line": 286,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"name": "realPath",
								"id": 78
							},
							"defaultValue": "       realPath"
						},
						{
							"id": 146,
							"name": "remove",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "fsUtil.ts",
									"line": 300,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"name": "remove",
								"id": 128
							},
							"defaultValue": "         remove"
						},
						{
							"id": 141,
							"name": "writeFile",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "fsUtil.ts",
									"line": 295,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "writeFile",
								"id": 106
							},
							"defaultValue": "      writeFile"
						},
						{
							"id": 144,
							"name": "writeJsonFile",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "fsUtil.ts",
									"line": 298,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "writeJsonFile",
								"id": 119
							},
							"defaultValue": "  writeJsonFile"
						},
						{
							"id": 142,
							"name": "writeStream",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "fsUtil.ts",
									"line": 296,
									"character": 15
								}
							],
							"type": {
								"type": "reference",
								"name": "writeStream",
								"id": 111
							},
							"defaultValue": "    writeStream"
						},
						{
							"id": 143,
							"name": "writeTextFile",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "fsUtil.ts",
									"line": 297,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "writeTextFile",
								"id": 115
							},
							"defaultValue": "  writeTextFile"
						}
					],
					"groups": [
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								145,
								135,
								134,
								136,
								133,
								137,
								138,
								140,
								139,
								132,
								146,
								141,
								144,
								142,
								143
							]
						}
					],
					"sources": [
						{
							"fileName": "fsUtil.ts",
							"line": 285,
							"character": 19
						}
					],
					"type": {
						"type": "instrinct",
						"name": "object"
					}
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						70,
						71
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						123,
						87,
						84,
						90,
						75,
						81,
						93,
						96,
						103,
						100,
						78,
						128,
						72,
						106,
						119,
						111,
						115
					]
				},
				{
					"title": "Object literals",
					"kind": 2097152,
					"children": [
						131
					]
				}
			],
			"sources": [
				{
					"fileName": "fsUtil.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 157,
			"name": "\"httpUtil\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/sth1pal/Documents/Development/JavaScript/node.js/ts6/dev/hsLibs/node/hsNode/src/httpUtil.ts",
			"children": [
				{
					"id": 158,
					"name": "http",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"sources": [
						{
							"fileName": "httpUtil.ts",
							"line": 1,
							"character": 10
						}
					],
					"type": {
						"type": "instrinct",
						"name": "any"
					},
					"defaultValue": " require('http')"
				},
				{
					"id": 163,
					"name": "get",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 164,
							"name": "get",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"returns": "promise to provide the result of the request.\n",
								"tags": [
									{
										"tag": "ngdoc",
										"text": "object"
									},
									{
										"tag": "name",
										"text": "get"
									},
									{
										"tag": "methodof",
										"text": "hsNode.httpUtil"
									},
									{
										"tag": "description",
										"text": "sends a http get request and promises to return the result."
									}
								]
							},
							"parameters": [
								{
									"id": 165,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the options to pass along to the get request"
									},
									"type": {
										"type": "instrinct",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "instrinct",
										"name": "string"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "httpUtil.ts",
							"line": 46,
							"character": 19
						}
					]
				},
				{
					"id": 159,
					"name": "request",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 160,
							"name": "request",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"returns": "promise to provide the result of the request.\n",
								"tags": [
									{
										"tag": "ngdoc",
										"text": "object"
									},
									{
										"tag": "name",
										"text": "request"
									},
									{
										"tag": "methodof",
										"text": "hsNode.httpUtil"
									},
									{
										"tag": "description",
										"text": "sends a http request and promises to return the result."
									}
								]
							},
							"parameters": [
								{
									"id": 161,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the options to pass along to the request"
									},
									"type": {
										"type": "instrinct",
										"name": "any"
									}
								},
								{
									"id": 162,
									"name": "postData",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"text": "optional data to post"
									},
									"type": {
										"type": "instrinct",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "instrinct",
										"name": "string"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "httpUtil.ts",
							"line": 22,
							"character": 23
						}
					]
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						158
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						163,
						159
					]
				}
			],
			"sources": [
				{
					"fileName": "httpUtil.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 147,
			"name": "\"index\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/sth1pal/Documents/Development/JavaScript/node.js/ts6/dev/hsLibs/node/hsNode/src/index.ts",
			"sources": [
				{
					"fileName": "index.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1,
			"name": "\"log\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/sth1pal/Documents/Development/JavaScript/node.js/ts6/dev/hsLibs/node/hsNode/src/log.ts",
			"comment": {
				"tags": [
					{
						"tag": "ngdoc",
						"text": "object"
					},
					{
						"tag": "name",
						"text": "hsNode.log"
					},
					{
						"tag": "description",
						"text": "Logging convenience functions.\n## Usage\n<pre>\nimport log from './log';\nlog.info('by the way:'); // -> 20160817 09:59:08.032 info by the way:\nlog.error('oh dear!');   // -> 20160817 09:59:08.045 error *** oh dear!\n</pre>\n\n### Using the format template:\n<pre>\nlog.format('%MMM %DD %hh%mm%ss');\nlog.info('by the way:');  // -> Aug 17 095908 info by the way:\nlog.error('oh dear!');    // -> Aug 17 095908 error *** oh dear!\n</pre>\n\n### With module prefix:\n<pre>\nimport log from './log';\nlog.prefix('Main');\nlog.format('%hh%mm%ss');\nlog.info('by the way:');  // -> 09:59:08.032 Main info by the way:\nlog.error('oh dear!');    // -> 09:59:08.045 Main error *** oh dear!\n</pre>\n\n### Using a log file\n<pre>\nlog.format('%MM%DD');\nlog.info('by the way:'); // -> 0817 info by the way:\nlog.logFile('l%YY%MM');  // -> 0817 info now logging to file l1608.txt\nlog.error('oh dear!');   // -> 0817 error *** oh dear!\n</pre>\n\n## Reporting Levels:\n- [DEBUG](#debug)\n- [INFO](#info)\n- [WARN](#warn)\n- [ERROR](#error)\n\n## Reporting methods\n- {@link hsNode.log#methods_debug debug()}\n- {@link hsNode.log#methods_info info()}\n- {@link hsNode.log#methods_warn warn()}\n- {@link hsNode.log#methods_error error()}\n\n## Configurations:\n- {@link hsNode.log#methods_level level()}\n- {@link hsNode.log#methods_format format()}\n- {@link hsNode.log#methods_prefix prefix()}\n- {@link hsNode.log#methods_logFile logFile()}\n"
					}
				]
			},
			"children": [
				{
					"id": 2,
					"name": "LevelDesc",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Type definition for level descriptors"
					},
					"children": [
						{
							"id": 5,
							"name": "desc",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "log.ts",
									"line": 90,
									"character": 57
								}
							],
							"type": {
								"type": "instrinct",
								"name": "string"
							}
						},
						{
							"id": 3,
							"name": "importance",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "log.ts",
									"line": 90,
									"character": 32
								}
							],
							"type": {
								"type": "instrinct",
								"name": "number"
							}
						},
						{
							"id": 4,
							"name": "sym",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "log.ts",
									"line": 90,
									"character": 44
								}
							],
							"type": {
								"type": "instrinct",
								"name": "symbol"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								5,
								3,
								4
							]
						}
					],
					"sources": [
						{
							"fileName": "log.ts",
							"line": 90,
							"character": 19
						}
					]
				},
				{
					"id": 6,
					"name": "DEBUG",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"comment": {
						"tags": [
							{
								"tag": "ngdoc",
								"text": "property"
							},
							{
								"tag": "propertyof",
								"text": "hsNode.log"
							},
							{
								"tag": "name",
								"text": "DEBUG"
							},
							{
								"tag": "description",
								"text": "Debug reporting level with importance 0\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "log.ts",
							"line": 64,
							"character": 11
						}
					],
					"type": {
						"type": "instrinct",
						"name": "symbol"
					},
					"defaultValue": " Symbol('DEBUG')"
				},
				{
					"id": 9,
					"name": "ERROR",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"comment": {
						"tags": [
							{
								"tag": "ngdoc",
								"text": "property"
							},
							{
								"tag": "propertyof",
								"text": "hsNode.log"
							},
							{
								"tag": "name",
								"text": "ERROR"
							},
							{
								"tag": "description",
								"text": "Warning reporting level with importance 3\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "log.ts",
							"line": 85,
							"character": 11
						}
					],
					"type": {
						"type": "instrinct",
						"name": "symbol"
					},
					"defaultValue": " Symbol('ERROR')"
				},
				{
					"id": 7,
					"name": "INFO",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"comment": {
						"tags": [
							{
								"tag": "ngdoc",
								"text": "property"
							},
							{
								"tag": "name",
								"text": "INFO"
							},
							{
								"tag": "propertyof",
								"text": "hsNode.log"
							},
							{
								"tag": "description",
								"text": "Info reporting level with importance 1\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "log.ts",
							"line": 71,
							"character": 10
						}
					],
					"type": {
						"type": "instrinct",
						"name": "symbol"
					},
					"defaultValue": " Symbol('INFO')"
				},
				{
					"id": 8,
					"name": "WARN",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"comment": {
						"tags": [
							{
								"tag": "ngdoc",
								"text": "property"
							},
							{
								"tag": "name",
								"text": "WARN"
							},
							{
								"tag": "propertyof",
								"text": "hsNode.log"
							},
							{
								"tag": "description",
								"text": "Info reporting level with importance 2\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "log.ts",
							"line": 78,
							"character": 10
						}
					],
					"type": {
						"type": "instrinct",
						"name": "symbol"
					},
					"defaultValue": " Symbol('WARN')"
				},
				{
					"id": 16,
					"name": "gDateFormat",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"comment": {
						"shortText": "current date format string. See [date module]('_date_.html')"
					},
					"sources": [
						{
							"fileName": "log.ts",
							"line": 105,
							"character": 15
						}
					],
					"type": {
						"type": "instrinct",
						"name": "string"
					},
					"defaultValue": "\"%YYYY%MM%DD %hh:%mm:%ss.%jjj\""
				},
				{
					"id": 15,
					"name": "gLevel",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"comment": {
						"shortText": "current reporting level, same across all modules"
					},
					"sources": [
						{
							"fileName": "log.ts",
							"line": 101,
							"character": 10
						}
					],
					"type": {
						"type": "reference",
						"name": "LevelDesc",
						"id": 2
					},
					"defaultValue": " (gLevel===undefined)? gLevels[INFO] : gLevel"
				},
				{
					"id": 17,
					"name": "gLogFile",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"comment": {
						"shortText": "name of the current log file, or undefined"
					},
					"sources": [
						{
							"fileName": "log.ts",
							"line": 108,
							"character": 12
						}
					],
					"type": {
						"type": "instrinct",
						"name": "string"
					}
				},
				{
					"id": 18,
					"name": "log",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 19,
							"name": "log",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 20,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 21,
											"name": "DEBUG",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "log.ts",
													"line": 273,
													"character": 7
												}
											],
											"type": {
												"type": "instrinct",
												"name": "symbol"
											},
											"defaultValue": "\t    DEBUG"
										},
										{
											"id": 24,
											"name": "ERROR",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "log.ts",
													"line": 276,
													"character": 7
												}
											],
											"type": {
												"type": "instrinct",
												"name": "symbol"
											},
											"defaultValue": "\t    ERROR"
										},
										{
											"id": 22,
											"name": "INFO",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "log.ts",
													"line": 274,
													"character": 6
												}
											],
											"type": {
												"type": "instrinct",
												"name": "symbol"
											},
											"defaultValue": "\t    INFO"
										},
										{
											"id": 23,
											"name": "WARN",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "log.ts",
													"line": 275,
													"character": 6
												}
											],
											"type": {
												"type": "instrinct",
												"name": "symbol"
											},
											"defaultValue": "\t    WARN"
										},
										{
											"id": 33,
											"name": "config",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "log.ts",
													"line": 285,
													"character": 14
												}
											],
											"type": {
												"type": "reference",
												"name": "config"
											},
											"defaultValue": "     config"
										},
										{
											"id": 30,
											"name": "dateFormat",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "log.ts",
													"line": 282,
													"character": 12
												}
											],
											"type": {
												"type": "reference",
												"name": "dateFormat"
											},
											"defaultValue": " dateFormat"
										},
										{
											"id": 26,
											"name": "debug",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "log.ts",
													"line": 278,
													"character": 7
												}
											],
											"type": {
												"type": "reference",
												"name": "debug"
											},
											"defaultValue": "\t    debug"
										},
										{
											"id": 29,
											"name": "error",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "log.ts",
													"line": 281,
													"character": 7
												}
											],
											"type": {
												"type": "reference",
												"name": "error"
											},
											"defaultValue": "\t    error"
										},
										{
											"id": 27,
											"name": "info",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "log.ts",
													"line": 279,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "info"
											},
											"defaultValue": " \t    info"
										},
										{
											"id": 25,
											"name": "level",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "log.ts",
													"line": 277,
													"character": 7
												}
											],
											"type": {
												"type": "reference",
												"name": "level"
											},
											"defaultValue": "\t    level"
										},
										{
											"id": 32,
											"name": "logFile",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "log.ts",
													"line": 284,
													"character": 9
												}
											],
											"type": {
												"type": "reference",
												"name": "logFile"
											},
											"defaultValue": "    logFile"
										},
										{
											"id": 31,
											"name": "prefix",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "log.ts",
													"line": 283,
													"character": 8
												}
											],
											"type": {
												"type": "reference",
												"name": "prefix"
											},
											"defaultValue": "\t    prefix"
										},
										{
											"id": 28,
											"name": "warn",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "log.ts",
													"line": 280,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "warn"
											},
											"defaultValue": "\t    warn"
										}
									],
									"groups": [
										{
											"title": "Variables",
											"kind": 32,
											"children": [
												21,
												24,
												22,
												23,
												33,
												30,
												26,
												29,
												27,
												25,
												32,
												31,
												28
											]
										}
									]
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "log.ts",
							"line": 111,
							"character": 12
						}
					]
				},
				{
					"id": 10,
					"name": "gLevels",
					"kind": 2097152,
					"kindString": "Object literal",
					"flags": {},
					"comment": {
						"shortText": "map of valid reporting levels"
					},
					"children": [
						{
							"id": 11,
							"name": "__computed",
							"kind": 2097152,
							"kindString": "Object literal",
							"flags": {},
							"children": [
								{
									"id": 14,
									"name": "desc",
									"kind": 32,
									"kindString": "Variable",
									"flags": {},
									"sources": [
										{
											"fileName": "log.ts",
											"line": 94,
											"character": 48
										},
										{
											"fileName": "log.ts",
											"line": 95,
											"character": 48
										},
										{
											"fileName": "log.ts",
											"line": 96,
											"character": 48
										},
										{
											"fileName": "log.ts",
											"line": 97,
											"character": 48
										}
									],
									"type": {
										"type": "instrinct",
										"name": "string"
									},
									"defaultValue": "\"ERROR\""
								},
								{
									"id": 12,
									"name": "importance",
									"kind": 32,
									"kindString": "Variable",
									"flags": {},
									"sources": [
										{
											"fileName": "log.ts",
											"line": 94,
											"character": 27
										},
										{
											"fileName": "log.ts",
											"line": 95,
											"character": 27
										},
										{
											"fileName": "log.ts",
											"line": 96,
											"character": 27
										},
										{
											"fileName": "log.ts",
											"line": 97,
											"character": 27
										}
									],
									"type": {
										"type": "instrinct",
										"name": "number"
									},
									"defaultValue": "3"
								},
								{
									"id": 13,
									"name": "sym",
									"kind": 32,
									"kindString": "Variable",
									"flags": {},
									"sources": [
										{
											"fileName": "log.ts",
											"line": 94,
											"character": 35
										},
										{
											"fileName": "log.ts",
											"line": 95,
											"character": 35
										},
										{
											"fileName": "log.ts",
											"line": 96,
											"character": 35
										},
										{
											"fileName": "log.ts",
											"line": 97,
											"character": 35
										}
									],
									"type": {
										"type": "instrinct",
										"name": "symbol"
									},
									"defaultValue": " ERROR"
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										14,
										12,
										13
									]
								}
							],
							"sources": [
								{
									"fileName": "log.ts",
									"line": 94,
									"character": 11
								},
								{
									"fileName": "log.ts",
									"line": 95,
									"character": 10
								},
								{
									"fileName": "log.ts",
									"line": 96,
									"character": 10
								},
								{
									"fileName": "log.ts",
									"line": 97,
									"character": 11
								}
							],
							"type": {
								"type": "instrinct",
								"name": "object"
							}
						}
					],
					"groups": [
						{
							"title": "Object literals",
							"kind": 2097152,
							"children": [
								11
							]
						}
					],
					"sources": [
						{
							"fileName": "log.ts",
							"line": 93,
							"character": 13
						}
					],
					"type": {
						"type": "instrinct",
						"name": "object"
					}
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						2
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						6,
						9,
						7,
						8,
						16,
						15,
						17
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						18
					]
				},
				{
					"title": "Object literals",
					"kind": 2097152,
					"children": [
						10
					]
				}
			],
			"sources": [
				{
					"fileName": "log.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 41,
			"name": "\"node\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/sth1pal/Documents/Development/JavaScript/node.js/ts6/dev/hsLibs/node/hsNode/src/node.ts",
			"children": [
				{
					"id": 42,
					"name": "util",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"comment": {
						"tags": [
							{
								"tag": "ngdoc",
								"text": "overview"
							},
							{
								"tag": "name",
								"text": "hsNode"
							},
							{
								"tag": "description",
								"text": "\nUtility Modules for use with Node.js\n======================================\nProvides\n- {@link hsNode.log log}: logging support\n- {@link hsNode.date date}: sprintf-style date formatting\n- {@link hsNode.excel excel}: reading tables from Excel files\n- {@link hsNode.hsLibs hsLibs}: NodeJS module wrapper for hs and hsData libraries\n\n# Test Status: NodeJS\n<iframe src='../../libraries/hsNode/tests/index.html'\n\t\tstyle=\"border:none; \"\n\t\twidth=\"130%\" height=\"500px\">\n</iframe>\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "node.ts",
							"line": 20,
							"character": 10
						}
					],
					"type": {
						"type": "instrinct",
						"name": "any"
					},
					"defaultValue": " require('util')"
				},
				{
					"id": 51,
					"name": "delay",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 52,
							"name": "delay",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"returns": "a Promise that resolves after `ms`\n",
								"tags": [
									{
										"tag": "ngdoc",
										"text": "function"
									},
									{
										"tag": "name",
										"text": "delay"
									},
									{
										"tag": "methodof",
										"text": "hsNode.hsLibs"
									},
									{
										"tag": "description",
										"text": "delay promise for use in delay(ms).then(doSomething)."
									}
								]
							},
							"parameters": [
								{
									"id": 53,
									"name": "ms",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the milliseconds to wait before resolving"
									},
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "instrinct",
										"name": "Object"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "node.ts",
							"line": 54,
							"character": 21
						}
					]
				},
				{
					"id": 43,
					"name": "inspect",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 44,
							"name": "inspect",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"returns": "a color-formatted string representing `obj`\n",
								"tags": [
									{
										"tag": "ngdoc",
										"text": "function"
									},
									{
										"tag": "name",
										"text": "inspect"
									},
									{
										"tag": "methodof",
										"text": "hsNode.hsLibs"
									},
									{
										"tag": "description",
										"text": "inspects the provided obj using the node utilities inspect function."
									}
								]
							},
							"parameters": [
								{
									"id": 45,
									"name": "obj",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the object to inspect"
									},
									"type": {
										"type": "instrinct",
										"name": "any"
									}
								},
								{
									"id": 46,
									"name": "depth",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the depth-level to report on, or inifinite depth if omitted"
									},
									"type": {
										"type": "instrinct",
										"name": "number"
									},
									"defaultValue": "null"
								},
								{
									"id": 47,
									"name": "colors",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "boolean"
									},
									"defaultValue": "true"
								}
							],
							"type": {
								"type": "instrinct",
								"name": "any"
							}
						}
					],
					"sources": [
						{
							"fileName": "node.ts",
							"line": 32,
							"character": 23
						}
					]
				},
				{
					"id": 48,
					"name": "timeout",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 49,
							"name": "timeout",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"returns": "a Promise that rejects after `ms`\n",
								"tags": [
									{
										"tag": "ngdoc",
										"text": "function"
									},
									{
										"tag": "name",
										"text": "timeout"
									},
									{
										"tag": "methodof",
										"text": "hsNode.hsLibs"
									},
									{
										"tag": "description",
										"text": "timeout promise for use in Promise.race()."
									}
								]
							},
							"parameters": [
								{
									"id": 50,
									"name": "ms",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the milliseconds to wait before rejecting"
									},
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "instrinct",
										"name": "Object"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "node.ts",
							"line": 44,
							"character": 23
						}
					]
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						42
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						51,
						43,
						48
					]
				}
			],
			"sources": [
				{
					"fileName": "node.ts",
					"line": 1,
					"character": 0
				}
			]
		}
	],
	"groups": [
		{
			"title": "External modules",
			"kind": 1,
			"children": [
				148,
				34,
				54,
				69,
				157,
				147,
				1,
				41
			]
		}
	]
}