"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const m = require("mithril");
const Layout_1 = require("./Layout");
class DefinedArea extends Layout_1.LayoutArea {
    constructor(size) { super(size); }
}
class PixelArea extends DefinedArea {
    constructor(size) { super(size); }
}
class PercentArea extends DefinedArea {
    constructor(size) { super(size); }
}
class FillArea extends Layout_1.LayoutArea {
    constructor() { super(-1); }
}
function px(px) { return new PixelArea(px); }
exports.px = px;
function pc(pc) { return new PercentArea(pc); }
exports.pc = pc;
exports.FILL = new FillArea();
class LayoutDescriptor {
    constructor(areaDesc) {
        this.areaDesc = areaDesc;
    }
    getSizes(numAreas) {
    }
}
const cParams = {
    columns: {
        cssClass: '.hs-column-layout',
        fields: ['top', 'bottom', 'left', 'right', 'height', 'width']
    },
    rows: {
        cssClass: '.hs-row-layout',
        fields: ['left', 'right', 'top', 'bottom', 'width', 'height']
    }
};
class Pillars extends Layout_1.LayoutStyle {
    constructor(paramName, areaDesc) {
        super(areaDesc);
        this.areaDesc = areaDesc;
        this.fields = cParams[paramName].fields;
        this.cssClass = cParams[paramName].cssClass;
        let n = areaDesc.length - 1;
        let first = 0;
        let last = 0;
        // if any of the dimensions are in px, use the pixel method; else use the percent method
        // get index of first and last undefined area, if any            
        this.unit = areaDesc.some((area) => (area instanceof PixelArea)) ? this.unitPixel : this.unitPercent; // true if any area is PixelArea
        areaDesc.some((area, i) => ((areaDesc[i] instanceof DefinedArea) ? ++first < 0 : true)); // first = number of consecutive fixed fields at start
        areaDesc.some((area, i) => ((areaDesc[n - i] instanceof DefinedArea) ? ++last < 0 : true)); // last  = number of consecutive fixed fields at end
        this.firstFixed = first;
        this.lastFixed = Math.min(last, areaDesc.length - first);
    }
    ;
    // num: number of areas to layout
    getSizes(num) {
        const first = this.firstFixed;
        const last = this.lastFixed;
        const desc = this.areaDesc;
        const len = desc.length;
        function getSize(i) {
            let size = null;
            let t = null;
            if (i > num - 1 - last) {
                size = desc[len - (num - i)].size;
                t = 'end';
            } // end sequence
            else if (i < first) {
                size = desc[i].size;
                t = 'start';
            } // start sequence
            return { size: size, code: t, fields: {} };
        }
        return [...Array(num).keys()].map(getSize);
    }
    unitPercent(num) {
        let f = this.fields;
        let max = 100.0;
        let defDim = max / num; // divvy up remaining space
        let styles = this.getSizes(num);
        styles.forEach(style => {
            if (style.size) {
                max = max - style.size;
                num--;
            }
        });
        function pass(styles, ix0, ix1, breakCond) {
            let sumDim = 0;
            styles.some(style => {
                let size = style.size || defDim;
                if (breakCond(style.code)) {
                    return true;
                }
                style.fields[f[ix0]] = sumDim + '%';
                sumDim += size;
                style.fields[f[ix1]] = (100 - sumDim) + '%';
                style.fields[f[5]] = 'auto';
                return false;
            });
        }
        pass(styles, 2, 3, (e) => e === 'end'); // forward pass
        pass(styles.reverse(), 3, 2, (e) => e !== 'end'); // backward pass
        return styles.reverse(); // reverse a second time for original sequence.
    }
    ;
    unitPixel(num) {
        let styles = this.getSizes(num);
        let f = this.fields;
        let defDim = 100.0 / num; // used for unspecified widths
        // work forwards through the heights
        let sumDim = 0;
        styles.some((style, i) => {
            if (style.code === 'start') {
                style.fields[f[2]] = sumDim + 'px';
                sumDim += style.size + (this.spacing || 0) + (this.spacing || 0);
                style.fields[f[3]] = 'auto';
                style.fields[f[5]] = style.size + 'px';
            }
            else if (style.code === null) {
                style.fields[f[2]] = (sumDim > 0) ? (sumDim + 'px') : (i * defDim + '%');
                sumDim = -1;
                style.fields[f[3]] = (100 - (i + 1) * defDim) + '%';
                style.fields[f[5]] = 'auto';
            }
            else if (style.code === 'end') {
                return true;
            }
            return false;
        });
        // work backwards through the heights
        sumDim = 0;
        styles.slice().reverse().some((style, i) => {
            style.fields[f[3]] = sumDim + 'px';
            if (style.code === 'end') {
                sumDim += style.size + (this.spacing || 0) + (this.spacing || 0);
                style.fields[f[2]] = 'auto';
                style.fields[f[5]] = style.size + 'px';
            }
            else {
                if (sumDim > 0 && style.code !== 'start') {
                    style.fields[f[5]] = 'auto';
                }
                return true;
            }
            return false;
        });
        return styles;
    }
    ;
    getStyles(content) {
        let f = this.fields;
        let styles = this.unit(content.length);
        content.map((area, i) => {
            area.style = `${f[0]}:0%; ${f[1]}:0%; `;
            Object.keys(styles[i].fields).forEach((st) => { area.style += `${st}: ${styles[i].fields[st]};`; });
        });
        return this.cssClass;
    }
    ;
}
;
class Columns extends Pillars {
    constructor(areaDesc) {
        super('columns', areaDesc);
        this.areaDesc = areaDesc;
    }
    ;
}
exports.Columns = Columns;
;
class Rows extends Pillars {
    constructor(areaDesc) {
        super('rows', areaDesc);
        this.areaDesc = areaDesc;
    }
    ;
}
exports.Rows = Rows;
;
Layout_1.LayoutStyle.register('columns', Columns);
Layout_1.LayoutStyle.register('rows', Rows);
//# sourceMappingURL=data:application/json;base64, 
//# sourceMappingURL=data:application/json;base64,